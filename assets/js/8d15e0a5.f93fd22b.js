"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60],{3436:(e,n,a)=>{function t(e){const n=e.split("\n"),a=n.filter((e=>""!==e.trim())).reduce(((e,n)=>Math.min(e,n.search(/\S/))),1/0);return n.map((e=>e.slice(a))).join("\n").trim()}a.d(n,{T:()=>t})},4628:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>v,frontMatter:()=>p,metadata:()=>g,toc:()=>u});var t=a(8168),i=(a(6540),a(5680)),r=a(7227),o=a(9489),l=(a(3012),a(238)),d=a(3436),s=a(8180);const p={},c="Header & Footer",g={unversionedId:"guides/header-footer",id:"guides/header-footer",title:"Header & Footer",description:"For the sake of brevity in our documentation, we will use the term marginals to collectively refer to headers and footers.",source:"@site/docs/guides/header-footer.md",sourceDirName:"guides",slug:"/guides/header-footer",permalink:"/obsidian-typing/docs/guides/header-footer",draft:!1,editUrl:"https://github.com/konodyuk/obsidian-typing/tree/main/docs/docs/guides/header-footer.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Prefix",permalink:"/obsidian-typing/docs/guides/prefix"},next:{title:"Links",permalink:"/obsidian-typing/docs/guides/link"}},m={},u=[{value:"Configuration Syntax",id:"configuration-syntax",level:2},{value:"Markdown Marginals",id:"markdown-marginals",level:2},{value:"React Marginals",id:"react-marginals",level:2},{value:"1. Function Approach",id:"1-function-approach",level:3},{value:"2. Expression Approach",id:"2-expression-approach",level:3},{value:"Context Variables",id:"context-variables",level:3},{value:"Static Context",id:"static-context",level:4},{value:"Dynamic Context",id:"dynamic-context",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Example",id:"example",level:2}],y=(h="OTLSyntaxCodeBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",e)});var h;const f={toc:u},b="wrapper";function v(e){let{components:n,...a}=e;return(0,i.yg)(b,(0,t.A)({},f,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"header--footer"},"Header & Footer"),(0,i.yg)("p",null,"For the sake of brevity in our documentation, we will use the term ",(0,i.yg)("strong",{parentName:"p"},"marginals")," to collectively refer to headers and footers."),(0,i.yg)("p",null,"Headers and footers allow you to automatically insert markdown content or custom React components at the beginning and end of your notes. The distinct advantage here is the capability to configure marginals individually for each note type, offering tailored interfaces for notes of various purposes."),(0,i.yg)("h2",{id:"configuration-syntax"},"Configuration Syntax"),(0,i.yg)("p",null,"Marginals belong to the ",(0,i.yg)("inlineCode",{parentName:"p"},"style")," section and can be specified as:"),(0,i.yg)(y,{mdxType:"OTLSyntaxCodeBlock"},"type TypeName {\n    style {\n        header = <#FUNCTION | #EXPR | #MARKDOWN>\n        footer = <#FUNCTION | #EXPR | #MARKDOWN>\n    }\n}"),(0,i.yg)("h2",{id:"markdown-marginals"},"Markdown Marginals"),(0,i.yg)("p",null,"When you simply need to introduce basic content elements like headers, text, lists, or code blocks, utilize markdown. Here's how to specify a markdown marginal:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        header = md"""\n            Some **markdown** content.\n\n            ```dataview\n            some query\n            ```\n            ...other content...\n        """\n    }\n}\n')),(0,i.yg)("p",null,"The tags ",(0,i.yg)("inlineCode",{parentName:"p"},"markdown")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"md")," both indicate a markdown string."),(0,i.yg)("h2",{id:"react-marginals"},"React Marginals"),(0,i.yg)("p",null,"For a more customized experience, React components come into play. There are two primary methods to define them:"),(0,i.yg)("h3",{id:"1-function-approach"},"1. Function Approach"),(0,i.yg)("p",null,"Utilize the ",(0,i.yg)("inlineCode",{parentName:"p"},"fn")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"function")," tag to script a function returning a React component:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        header = fn"""\n            import {Anything} from "anywhere"\n            // process as required\n            return <Anything>{any <b>react</b> element}</Anything>\n        """\n    }\n}\n')),(0,i.yg)("h3",{id:"2-expression-approach"},"2. Expression Approach"),(0,i.yg)("p",null,"If your function is succinct, limited to a single expression such as:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        header = fn"""\n            return <div>I am a header.</div>\n        """\n    }\n}\n')),(0,i.yg)("p",null,"You can simplify it further using the ",(0,i.yg)("inlineCode",{parentName:"p"},"expr")," tag:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        header = expr"""<div>I am a header.</div>"""\n    }\n}\n')),(0,i.yg)("h3",{id:"context-variables"},"Context Variables"),(0,i.yg)("h4",{id:"static-context"},"Static Context"),(0,i.yg)("p",null,"Accessible in every ",(0,i.yg)("inlineCode",{parentName:"p"},"fn")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"expr"),":"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"note"),": The current ",(0,i.yg)("inlineCode",{parentName:"li"},"Note")," object."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"api"),": The global ",(0,i.yg)("inlineCode",{parentName:"li"},"TypingAPI")," object.")),(0,i.yg)("h4",{id:"dynamic-context"},"Dynamic Context"),(0,i.yg)("p",null,"Contained within the ",(0,i.yg)("inlineCode",{parentName:"p"},"ctx")," object with the following properties:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"container"),": The HTML container designated for the marginal."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"component"),": The Obsidian ",(0,i.yg)("inlineCode",{parentName:"li"},"Component")," object associated with the current block."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"reload()"),": Triggers a rerender of the current marginal."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"disableAutoreload()"),": Disables automatic rerendering of the current marginal on metadata change."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"on(event, callback)"),": Registers a callback for events from the ",(0,i.yg)("inlineCode",{parentName:"li"},"app.metadataCache"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"register(callback)"),": Sets a callback to be invoked when the marginal is unloaded."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"registerEvent(eventRef)"),": Registers an event reference to be detached during the unloading of the marginal.")),(0,i.yg)("h3",{id:"error-handling"},"Error Handling"),(0,i.yg)("p",null,"Should any errors occur while rendering the marginal, an error block will replace the marginal. This block can be expanded to view a comprehensive stacktrace, aiding in debugging."),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)(o.A,{mdxType:"Tabs"},(0,i.yg)(r.A,{value:"otl",label:"OTL",mdxType:"TabItem"},(0,i.yg)(l.A,{language:"otl",mdxType:"CodeBlock"},(0,d.T)('\n            type Issue {\n                style {\n                    header = fn"""\n                        import {Breadcrumb} from "packages/breadcrumb"\n                        import {Wikihead} from "packages/wiki"\n                        return <>\n                            <Breadcrumb note={note} base={"apps/Issues.md"} />\n                            <Wikihead note={note} exclude={["in"]} />\n                        </>\n                    """\n                    footer = fn"""\n                        import {IssueFooter} from "./footer"\n                        return <IssueFooter note={note} />\n                    """\n                }\n            }\n        '))),(0,i.yg)(r.A,{value:"source",label:"Source View",mdxType:"TabItem"},(0,i.yg)(l.A,{language:"markdown",mdxType:"CodeBlock"},(0,d.T)('\n            status :: active\n            priority :: 4\n            in :: [[PRJ Project One]]\n            due :: 2023-10-31\n            deps :: [[I-1 Do this]], [[I-4 Write docs!!!]]\n            tags :: "refactor",\n\n            Subtasks:\n            - [ ] one\n            - [ ] two\n        '))),(0,i.yg)(r.A,{value:"preview",label:"Preview View",mdxType:"TabItem"},(0,i.yg)("center",null,(0,i.yg)("img",{className:"imgDemo",src:(0,s.A)("/img/issue-header-footer-1.png")})))))}v.isMDXComponent=!0}}]);