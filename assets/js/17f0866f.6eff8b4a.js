"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[387],{3436:(e,i,n)=>{function a(e){const i=e.split("\n"),n=i.filter((e=>""!==e.trim())).reduce(((e,i)=>Math.min(e,i.search(/\S/))),1/0);return i.map((e=>e.slice(n))).join("\n").trim()}n.d(i,{T:()=>a})},9602:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>u,contentTitle:()=>y,default:()=>N,frontMatter:()=>p,metadata:()=>m,toc:()=>g});var a=n(8168),t=(n(6540),n(5680)),l=n(7227),s=n(9489),d=(n(3012),n(238)),o=n(3436),r=n(8180);const p={},y="Fields",m={unversionedId:"guides/fields",id:"guides/fields",title:"Fields",description:"Fields in Obsidian are widely used to incorporate metadata into notes, either as frontmatter or inline fields.",source:"@site/docs/guides/fields.md",sourceDirName:"guides",slug:"/guides/fields",permalink:"/obsidian-typing/docs/guides/fields",draft:!1,editUrl:"https://github.com/konodyuk/obsidian-typing/tree/main/docs/docs/guides/fields.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Guides",permalink:"/obsidian-typing/docs/category/guides"},next:{title:"Prefix",permalink:"/obsidian-typing/docs/guides/prefix"}},u={},g=[{value:"Configuration Syntax",id:"configuration-syntax",level:2},{value:"Field Name",id:"field-name",level:3},{value:"Field Type",id:"field-type",level:3},{value:"Default Value",id:"default-value",level:3},{value:"Inline Fields",id:"inline-fields",level:2},{value:"Hiding Fields",id:"hiding-fields",level:2},{value:"UI Prompts",id:"ui-prompts",level:2},{value:"Example",id:"example",level:3}],f=(c="OTLSyntaxCodeBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.yg)("div",e)});var c;const h={toc:g},v="wrapper";function N(e){let{components:i,...n}=e;return(0,t.yg)(v,(0,a.A)({},h,n,{components:i,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"fields"},"Fields"),(0,t.yg)("p",null,"Fields in Obsidian are widely used to incorporate metadata into notes, either as frontmatter or inline fields.\nObsidian Typing enhances this by allowing you to define a precise schema for note types,\nspecifying which fields they can have and the data types of these fields."),(0,t.yg)("h2",{id:"configuration-syntax"},"Configuration Syntax"),(0,t.yg)("p",null,"To define fields, use the ",(0,t.yg)("inlineCode",{parentName:"p"},"fields")," section:"),(0,t.yg)(f,{mdxType:"OTLSyntaxCodeBlock"},'type TypeName {\n    fields {\n        // field_name: FieldType = "default value"\n        <#LOOSE_IDENTIFIER>: <#FIELD_TYPE> [= <#STRING>]\n        ...\n    }\n}'),(0,t.yg)("h3",{id:"field-name"},"Field Name"),(0,t.yg)("p",null,"For standard field names, use regular identifiers. For names with special characters or spaces, use string identifiers:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    fields {\n        i_am_a_normal_identifier: String\n        "i have spaces": Number\n        "symbols like \u5b98\u8a71 are included": List[Number]\n    }\n}\n')),(0,t.yg)("h3",{id:"field-type"},"Field Type"),(0,t.yg)("p",null,"The type determines the kind of data stored in the field and the picker used for it.\nThey are specified as ",(0,t.yg)("inlineCode",{parentName:"p"},"TypeName")," if they either have no parameters or if parameters aren't declared.\nIf they do have parameters, they are specified as ",(0,t.yg)("inlineCode",{parentName:"p"},"TypeName[<positional params>, <keyword params>]"),"."),(0,t.yg)("p",null,"Examples:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    fields {\n        field0: String // no parameters\n        field1: Note["Type1", "Type2"] // positional parameters only\n        field2: Number[min=2, max=3] // keyword parameters only\n        field3: Tag["value1", "value2", dynamic=true] // both types of parameters\n        field4: List[Note["Type3"]] // type as a positional parameter\n    }\n}\n')),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"For a comprehensive list of field types and their respective parameters, visit the ",(0,t.yg)("a",{parentName:"p",href:"/docs/category/field-types"},"Field Types Reference"),".")),(0,t.yg)("h3",{id:"default-value"},"Default Value"),(0,t.yg)("p",null,"Set a default field value for it to be automatically used during new note creation:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    fields {\n        status: Choice["open", "closed"] = "open"\n    }\n}\n')),(0,t.yg)("h2",{id:"inline-fields"},"Inline Fields"),(0,t.yg)("p",null,"Obsidian Typing uses ",(0,t.yg)("a",{parentName:"p",href:"https://blacksmithgu.github.io/obsidian-dataview/annotation/add-metadata/#inline-fields"},"inline fields"),"\nfor field value storageto store field values, letting users embed metadata directly in the note content.\nConsult the Dataview documentation for details on this format."),(0,t.yg)("admonition",{type:"info"},(0,t.yg)("p",{parentName:"admonition"},"Currently, we don't support frontmatter fields. Instead, we advocate for their storage within the note body.\nThis is because Obsidian does not recognize or auto-rename internal links in frontmatter. We anticipate this\nchanging in future updates, after which we'll introduce settings to determine the storage location of each field.")),(0,t.yg)("h2",{id:"hiding-fields"},"Hiding Fields"),(0,t.yg)("p",null,"If you want to streamline your notes' appearance (e.g. with ",(0,t.yg)("a",{parentName:"p",href:"/obsidian-typing/docs/guides/header-footer"},"headers"),"), you can hide inline fields.\nThe visibility can be controlled using the ",(0,t.yg)("inlineCode",{parentName:"p"},"style.hide_inline_fields")," attribute:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        hide_inline_fields = "all"\n    }\n}\n')),(0,t.yg)("p",null,"Options:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},'"none"')," (default) - all fields are visible."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},'"all"')," - conceals every inline field."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},'"defined"')," - obscures only the specified fields in the type.")),(0,t.yg)("h2",{id:"ui-prompts"},"UI Prompts"),(0,t.yg)("p",null,"After defining field names and types, Obsidian Typing generates intuitive prompts.\nThese enable note creation via the ",(0,t.yg)("inlineCode",{parentName:"p"},"New")," command and metadata modification through the ",(0,t.yg)("inlineCode",{parentName:"p"},"Change Name and Fields")," command.\nThis prompt also appears when clicking the note title, similar to renaming a note without this plugin."),(0,t.yg)("h3",{id:"example"},"Example"),(0,t.yg)(s.A,{mdxType:"Tabs"},(0,t.yg)(l.A,{value:"otl",label:"OTL",mdxType:"TabItem"},(0,t.yg)(d.A,{language:"otl",mdxType:"CodeBlock"},(0,o.T)('\n            type Issue {\n                folder = "typed/issues"\n                fields {\n                    status: Choice["backlog", "open", "closed"] = "backlog"\n                    priority: Number[min=1, max=5] = 2\n                    in: Note["Project", "Issue"]\n                    deps: List[Note["Issue"]]\n                    tags: List[Tag[dynamic=true]]\n                    due: Date\n                }\n            }\n        '))),(0,t.yg)(l.A,{value:"prompt-new",label:"Prompt for New",mdxType:"TabItem"},(0,t.yg)("center",null,(0,t.yg)("img",{className:"imgDemo",src:(0,r.A)("/img/issue-prompt-1-3.png")})))))}N.isMDXComponent=!0}}]);