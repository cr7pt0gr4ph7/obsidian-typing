"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[333],{3436:(e,n,t)=>{function i(e){const n=e.split("\n"),t=n.filter((e=>""!==e.trim())).reduce(((e,n)=>Math.min(e,n.search(/\S/))),1/0);return n.map((e=>e.slice(t))).join("\n").trim()}t.d(n,{T:()=>i})},7923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>g,toc:()=>u});var i=t(8168),a=(t(6540),t(5680)),o=t(7227),r=t(9489),l=(t(3012),t(238)),s=t(3436),p=t(8180);const c={title:"Links"},d="Interactive Links",g={unversionedId:"guides/link",id:"guides/link",title:"Links",description:"Enhance your internal links by rendering custom React components, having a more interactive and expressive user experience.",source:"@site/docs/guides/link.md",sourceDirName:"guides",slug:"/guides/link",permalink:"/obsidian-typing/docs/guides/link",draft:!1,editUrl:"https://github.com/konodyuk/obsidian-typing/tree/main/docs/docs/guides/link.md",tags:[],version:"current",frontMatter:{title:"Links"},sidebar:"docs",previous:{title:"Header & Footer",permalink:"/obsidian-typing/docs/guides/header-footer"},next:{title:"CSS",permalink:"/obsidian-typing/docs/guides/css"}},y={},u=[{value:"Configuration Syntax",id:"configuration-syntax",level:2},{value:"Defining React Links",id:"defining-react-links",level:2},{value:"1. Function Approach",id:"1-function-approach",level:3},{value:"2. Expression Approach",id:"2-expression-approach",level:3},{value:"Context Variables",id:"context-variables",level:3},{value:"Static Context",id:"static-context",level:4},{value:"Dynamic Context",id:"dynamic-context",level:4},{value:"Example",id:"example",level:2}],m=(h="OTLSyntaxCodeBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var h;const v={toc:u},x="wrapper";function f(e){let{components:n,...t}=e;return(0,a.yg)(x,(0,i.A)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"interactive-links"},"Interactive Links"),(0,a.yg)("p",null,"Enhance your internal links by rendering custom React components, having a more interactive and expressive user experience."),(0,a.yg)("h2",{id:"configuration-syntax"},"Configuration Syntax"),(0,a.yg)("p",null,"Specify the style for links within the style section as follows:"),(0,a.yg)(m,{mdxType:"OTLSyntaxCodeBlock"},"type TypeName {\n    style {\n        link = <#FUNCTION | #EXPR>\n    }\n}"),(0,a.yg)("h2",{id:"defining-react-links"},"Defining React Links"),(0,a.yg)("p",null,"Similar to ",(0,a.yg)("a",{parentName:"p",href:"/obsidian-typing/docs/guides/header-footer"},"headers and footers"),", there are two primary methods to define them:"),(0,a.yg)("h3",{id:"1-function-approach"},"1. Function Approach"),(0,a.yg)("p",null,"Use the ",(0,a.yg)("inlineCode",{parentName:"p"},"fn")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"function")," tag to script a function that returns a React component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        link = fn"""\n            import {Anything} from "anywhere"\n            // process as required\n            return <Anything>{any <b>react</b> element}</Anything>\n        """\n    }\n}\n')),(0,a.yg)("h3",{id:"2-expression-approach"},"2. Expression Approach"),(0,a.yg)("p",null,"For simpler, one-liner components, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"expr")," tag:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-otl"},'type TypeName {\n    style {\n        link = expr"""\n            <>\n                <span className={note.methods.iconClass()} />\n                {ctx.linkText ?? note.title}\n            </>\n        """\n    }\n}\n')),(0,a.yg)("h3",{id:"context-variables"},"Context Variables"),(0,a.yg)("h4",{id:"static-context"},"Static Context"),(0,a.yg)("p",null,"Accessible in every ",(0,a.yg)("inlineCode",{parentName:"p"},"fn")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"expr"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"note"),": The current ",(0,a.yg)("inlineCode",{parentName:"li"},"Note")," object."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"api"),": The global ",(0,a.yg)("inlineCode",{parentName:"li"},"TypingAPI")," object.")),(0,a.yg)("h4",{id:"dynamic-context"},"Dynamic Context"),(0,a.yg)("p",null,"Contained within the ",(0,a.yg)("inlineCode",{parentName:"p"},"ctx")," object with the following properties:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"container"),": The HTML container designated for the link."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"linkText"),": Displayed link text (e.g., in ",(0,a.yg)("inlineCode",{parentName:"li"},"[[path|linkText]]"),") or ",(0,a.yg)("inlineCode",{parentName:"li"},"null")," if unspecified.")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(o.A,{value:"otl",label:"OTL",mdxType:"TabItem"},(0,a.yg)(l.A,{language:"otl",mdxType:"CodeBlock"},(0,s.T)('\n            type Person {\n                style {\n                    link = fn"""\n                        import {Container, Avatar, Icon} from "./utils.tsx"\n                        const abbrev = note.page.name[0] + note.page.surname[0];\n                        const photo = note.methods.photo();\n                        if (photo)\n                            return <Container><Avatar src={src} />{abbrev}</Container>;\n                        }\n                        return <Container><Icon className="far fa-user" />{abbrev}</Container>;\n                    """\n                }\n                methods {\n                    photo = fn"""() => {\n                        const page = note.page\n                        if (!page.photo) return;\n                        const vault = api.app.vault;\n                        const tfile = vault.getAbstractFileByPath(page.photo.path)\n                        if (!tfile) return;\n                        return vault.getResourcePath(tfile)\n                    }"""\n                }\n            }\n        '))),(0,a.yg)(o.A,{value:"source",label:"Source View",mdxType:"TabItem"},(0,a.yg)(l.A,{language:"markdown",mdxType:"CodeBlock"},(0,s.T)("\n            - Discussed [[PRJ Project One]] with [[@ElonMusk]] and [[@JohnDoe]]\n        "))),(0,a.yg)(o.A,{value:"preview",label:"Preview View",mdxType:"TabItem"},(0,a.yg)("img",{className:"imgDemo",src:(0,p.A)("/img/links-1.png")}))))}f.isMDXComponent=!0}}]);