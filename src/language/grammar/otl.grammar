@top File {
  (TypeDeclaration | ImportStatement | newline ~statement | ";" ~statement)* | (Expression | newline  ~statement| ";" ~statement)*
}

// Type declarations
TypeDeclaration {
  kw<"abstract">? kw<"type"> LooseIdentifier ExtendsClause? TypeBody
}

TypeBody {
    scope
}

scope {
    "{" (Assignment | SectionDeclaration | newline)* "}"
}

ExtendsClause {
  kw<"extends"> LooseIdentifier ("," LooseIdentifier)*
}

// expressions
Expression {
  Literal | Assignment | AssignmentType | SectionDeclaration
}

// Section declarations
SectionDeclaration {
  Identifier ~statement SectionBody
}

SectionBody {
    scope
}

SectionAttributes {
  kw<"default">
}

// Assignments
Assignment {
  AssignmentName AssignmentMark? (":" AssignmentType)? ("=" AssignmentValue)? newline
}

AssignmentMark {
    "`" Identifier "`"
}

AssignmentName {
  LooseIdentifier
}

AssignmentValue {
  Literal
}

AssignmentType {
  Identifier ~statement ("[" newline* ParameterList newline* "]")?
}

ParameterList {
  Parameter ("," newline* Parameter)*
}

Parameter {
  (ParameterName "=")? ParameterValue
}

ParameterName {
  Identifier
}

ParameterValue {
  (Literal | AssignmentType)
}

// Literals
Literal {
  String | Number | Boolean | TaggedString | List | Object | Null
}

TaggedString {
  Tag ~statement String
}

Tag {
  Identifier
}

Object {
  /* "{" (Assignment | newline)* "}" */
  scope
}

Boolean {
  kw<"true"> | kw<"false">
}

Null {
  kw<"null">
}

List {
  "[" (Literal ("," Literal)*)? "]"
}

// Imports
ImportStatement {
  kw<"import"> "{" newline* ImportedSymbols newline* "}" kw<"from"> String
}

// or Specifiers?
ImportedSymbols {
  ImportedSymbol ("," newline* ImportedSymbol)*
}

ImportedSymbol {
    LooseIdentifier (kw<"as"> ImportAlias)?
}

ImportAlias {
    LooseIdentifier
}

// Identifiers
LooseIdentifier {
  Identifier ~statement | StringIdentifier ~statement
}

StringIdentifier {
    StringSingleLine ~statement
}

// Strings
String {
    StringMultiline | StringSingleLine ~statement
}

@tokens {
  Identifier {
    (@asciiLetter | "_")+ (@asciiLetter | @digit | "_")*
  }

  Number {
    "-"? @digit+ ("." (@digit)+)?
  }

  StringMultiline {
    '"""' (stringContentMultiline)* '"""'
  }

  StringSingleLine {
    '"' (stringContentDouble)* '"' | "'" (stringContentSingle)* "'"
  }

  stringContent[@isGroup=StringContent] {
    stringContentMultiline |
    stringContentDouble |
    stringContentSingle
  }

  stringContentMultiline {
    (!["\\] | "\\" _ | '"' longString2_2)+
  }

  stringContentDouble {
    ![\\\n"]+
  }

  stringContentSingle {
    ![\\\n']+
  }

  longString2_2 {
    !["\\] | "\\" _ | '"' longString2_3
  }

  longString2_3 {
    !["\\] | "\\" _
  }

  // Tokens marked as "Delimiter" will be automatically skipped by our tree visitors,
  // unless a specific visitor explicitly requests to visit them.
  "("[closedBy=")", group="Delimiter"]
  ")"[openedBy="(", group="Delimiter"]

  "["[closedBy="]", group="Delimiter"]
  "]"[openedBy="[", group="Delimiter"]

  "{"[closedBy="}", group="Delimiter"]
  "}"[openedBy="{", group="Delimiter"]

  "="[group="Delimiter"]
  ","[group="Delimiter"]
  "`"[group="Delimiter"]

  space {
    ($[ \t\f])+
  }

  newline {
    "\n" | "\r" | "\r\n"
  }

  LineComment {
    "//" ![\n]*
  }
}

@skip {
  (space | LineComment)*
}

@precedence {
  TypeDeclaration
  ImportStatement
  Float
  Integer
  Assignment
  AssignmentName
  AssignmentValue
  Literal
  TaggedString
  String
  StringIdentifier
}

kw<term> {
  @specialize[@name={term}]<Identifier, term>
}

ckw<term> {
  @extend[@name={term}]<Identifier, term>
}
